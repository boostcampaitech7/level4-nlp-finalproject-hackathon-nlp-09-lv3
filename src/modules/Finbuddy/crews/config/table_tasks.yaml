code_generate_task:
  description: >
    주어진 마크다운 테이블을 활용하여 사용자의 질문에 가장 도움이 되는 깔끔하고 세련된 시각화 코드를 작성
    코드는 반드시 파이썬의 문법에 맞게 작성되어야 함
    시각화 라이브러리는 matplot 과 seaborn 을 같이 사용해야 함
    NanumGothic폰트를 seaborn 에 적용시 sns.set_theme(font='NanumGothic') 로 등록해야 한다.
    코드에는 반드시 'output' 폴더에 결과물을 저장하는 로직이 포함돼 있어야 함
    결과물의 이름은 사용자가 알아볼 수 있는 이름의 png파일로 저장될 수 있어야 함
    만약 질문과 관계없는 테이블일 경우, 아무것도 출력하지 않아야 함
    질문: {query}
    테이블: {tables[table]}
    테이블에 대한 설명: {tables[summary]}
  expected_output: >
    주어진 테이블을 통해 제작된 시각화 코드
    저장되는 파일 이름을 반드시 명시
    만약 사용자의 질문과 관계 없는 테이블이라면 아무것도 출력하지 않음
  agent: code_generator

code_analyze_task:
  description: >
    code_generator가 생성한 시각화 코드를 검토
    파이썬 시각화 코드에 오류가 생기지 않도록 각별히 주의해야 함
    코드 실행 도구를 사용할 때에는 시각화 코드를 일부만 사용하지 않고 완전한 형태로 넣어야 함
    만약 코드가 비어있다면 아무것도 출력하지 않아야 함
    질문: {query}
    테이블: {tables[table]}
    테이블에 대한 설명: {tables[summary]}
  expected_output: >
    실행하는 데에 문제가 없는 완전한 형태의 코드
    저장된 파일의 이름
  agent: code_analyzer
  context: [code_generate_task]

table_answer_task:
  description: >
    사용자의 질문에 대해 생성된 코드를 참고하여 답변
    코드에 대한 해설은 필요 없음
    개발에 대해 잘 알지 못하는 사용자가 이해할 수 있도록 쉽게 설명되어야 함
    질문: {query}
  expected_output: >
    사용자가 질문한 내용에 대한 상세하고 도움이 되는 친절한 답변
    답변의 끝에는 반드시 생성된 이미지 파일의 이름을 명시해야 함
  agent: table_answerman
  context: [code_generate_task, code_analyze_task]




      # # Markdown 코드 블록에서 코드만 추출 (```python ~ ``` 사이의 내용)
    # code_block_match = re.search(r"```(?:python)?\n(.*?)\n```", code_str, re.DOTALL)
    # if code_block_match:
    #     code_str = code_block_match.group(1)
    # else:
    #     # 만약 코드 블록이 발견되지 않으면, 앞뒤의 ```를 제거
    #     code_str = code_str.strip()
    #     code_str = re.sub(r"^```(?:python)?\s*\n", "", code_str)
    #     code_str = re.sub(r"\n```$", "", code_str)

    # 임시 파이썬 파일에 코드 저장


